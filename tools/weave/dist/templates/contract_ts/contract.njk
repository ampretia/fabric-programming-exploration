{% macro schema(s) %}
{% if s.type %}
   {{s.type  }}
{% else %} 
   {{s.$ref | objectname }}
{% endif %}
{% endmacro %}

{% macro parameters(params) %}
{% for p in params -%} {{p.name}}:{{- schema(p.schema) -}}
    {%- if not loop.last -%}, {% endif -%}
{%- endfor %}
{% endmacro %}

{% macro arglist(params) %}
{% if params %}
{% for p in params -%} JSON.stringify({{p.name}})
    {%- if not loop.last -%}, {% endif -%}
{%- endfor %}
{%- endif %}
{% endmacro %}

import { Contract, Network } from 'fabric-network';

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export default class {{ name | replace(".","_") | lower }} {
    
    private contractName = '{{ name | lower }}';

    private network: Network;
    private contract: Contract;

    public constructor(network) {
        this.network = network;
    }

    public async init(chaincodeId: string) {
        this.contract = await this.network.getContract(chaincodeId, this.contractName);
    }
    
    {% for tx in transactions %}
    public async {{tx.name}}({{- parameters(tx.parameters) | trim  -}}): Promise<{{ schema(tx.return[0].schema) | trim }}>{
        const _tx = await this.contract.createTransaction('{{tx.name}}');
        const result = await _tx.submit({{- arglist(tx.parameters) -}});
        return JSON.parse(result.toString());
    }
    {% endfor %}

}

