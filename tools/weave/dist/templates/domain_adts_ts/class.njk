{% macro schema(s) %}
{% if s.type %}
   {{s.type  }}
{% else %} 
   {{s.$ref | objectname }}
{% endif %}
{% endmacro %}

{% macro parameters(params) %}
{% for p in params -%} {{p.name}}:{{- schema(p.schema) -}}
    {%- if not loop.last -%}, {% endif -%}
{%- endfor %}
{% endmacro %}

{% macro arglist(params) %}
{% if params %}
{% for p in params -%} JSON.stringify({{p.name}})
    {%- if not loop.last -%}, {% endif -%}
{%- endfor %}
{%- endif %}
{% endmacro %}

import { Object as DataType, Property } from 'fabric-contract-api';
import { State } from 'fabric-data';

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@DataType
export default class {{ title | replace(".","_") }} extends State {
    
    // no-arg constructor required
    public constructor() {
    }
   
    {% for name,details in properties %}
    @Property
    private {{ name }}: {{ details.type }};

    /**
     * Getter ${{name}}
     * @return { {{ details.type }} }
     */
    public get ${{name}}(): {{ details.type }} {
        return this.{{name}};
    }

    /**
     * Setter ${{name}}
     * @param { {{ details.type }} } value
     */
    public set ${{name}}(value: {{ details.type }}) {
        this.{{name}} = value;
    }
    {% endfor %}

}

