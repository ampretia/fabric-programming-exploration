/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.shipping.Asset', null, global);
goog.exportSymbol('proto.shipping.Business', null, global);
goog.exportSymbol('proto.shipping.Request', null, global);
goog.exportSymbol('proto.shipping.Response', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shipping.Asset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shipping.Asset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shipping.Asset.displayName = 'proto.shipping.Asset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shipping.Asset.prototype.toObject = function(opt_includeInstance) {
  return proto.shipping.Asset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shipping.Asset} msg The msg instance to transform.
 * @return {!Object}
 */
proto.shipping.Asset.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetid: msg.getAssetid(),
    description: msg.getDescription()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shipping.Asset}
 */
proto.shipping.Asset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shipping.Asset;
  return proto.shipping.Asset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shipping.Asset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shipping.Asset}
 */
proto.shipping.Asset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.shipping.Asset} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.shipping.Asset.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shipping.Asset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.shipping.Asset.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAssetid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.shipping.Asset} The clone.
 */
proto.shipping.Asset.prototype.cloneMessage = function() {
  return /** @type {!proto.shipping.Asset} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string assetId = 1;
 * @return {string}
 */
proto.shipping.Asset.prototype.getAssetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.shipping.Asset.prototype.setAssetid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.shipping.Asset.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.shipping.Asset.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shipping.Business = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shipping.Business, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shipping.Business.displayName = 'proto.shipping.Business';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shipping.Business.prototype.toObject = function(opt_includeInstance) {
  return proto.shipping.Business.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shipping.Business} msg The msg instance to transform.
 * @return {!Object}
 */
proto.shipping.Business.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    address: msg.getAddress(),
    phone: msg.getPhone(),
    description: msg.getDescription()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shipping.Business}
 */
proto.shipping.Business.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shipping.Business;
  return proto.shipping.Business.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shipping.Business} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shipping.Business}
 */
proto.shipping.Business.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.shipping.Business} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.shipping.Business.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shipping.Business.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.shipping.Business.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPhone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.shipping.Business} The clone.
 */
proto.shipping.Business.prototype.cloneMessage = function() {
  return /** @type {!proto.shipping.Business} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.shipping.Business.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.shipping.Business.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.shipping.Business.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.shipping.Business.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string phone = 3;
 * @return {string}
 */
proto.shipping.Business.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.shipping.Business.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.shipping.Business.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.shipping.Business.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shipping.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shipping.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shipping.Request.displayName = 'proto.shipping.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shipping.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.shipping.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shipping.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.shipping.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    anasset: (f = msg.getAnasset()) && proto.shipping.Asset.toObject(includeInstance, f),
    abusiness: (f = msg.getAbusiness()) && proto.shipping.Business.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shipping.Request}
 */
proto.shipping.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shipping.Request;
  return proto.shipping.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shipping.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shipping.Request}
 */
proto.shipping.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.shipping.Asset;
      reader.readMessage(value,proto.shipping.Asset.deserializeBinaryFromReader);
      msg.setAnasset(value);
      break;
    case 2:
      var value = new proto.shipping.Business;
      reader.readMessage(value,proto.shipping.Business.deserializeBinaryFromReader);
      msg.setAbusiness(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.shipping.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.shipping.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shipping.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.shipping.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAnasset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.shipping.Asset.serializeBinaryToWriter
    );
  }
  f = this.getAbusiness();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.shipping.Business.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.shipping.Request} The clone.
 */
proto.shipping.Request.prototype.cloneMessage = function() {
  return /** @type {!proto.shipping.Request} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Asset anAsset = 1;
 * @return {proto.shipping.Asset}
 */
proto.shipping.Request.prototype.getAnasset = function() {
  return /** @type{proto.shipping.Asset} */ (
    jspb.Message.getWrapperField(this, proto.shipping.Asset, 1));
};


/** @param {proto.shipping.Asset|undefined} value  */
proto.shipping.Request.prototype.setAnasset = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.shipping.Request.prototype.clearAnasset = function() {
  this.setAnasset(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.shipping.Request.prototype.hasAnasset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Business aBusiness = 2;
 * @return {proto.shipping.Business}
 */
proto.shipping.Request.prototype.getAbusiness = function() {
  return /** @type{proto.shipping.Business} */ (
    jspb.Message.getWrapperField(this, proto.shipping.Business, 2));
};


/** @param {proto.shipping.Business|undefined} value  */
proto.shipping.Request.prototype.setAbusiness = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.shipping.Request.prototype.clearAbusiness = function() {
  this.setAbusiness(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.shipping.Request.prototype.hasAbusiness = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.shipping.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.shipping.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.shipping.Response.displayName = 'proto.shipping.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.shipping.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.shipping.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.shipping.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.shipping.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestid: msg.getRequestid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.shipping.Response}
 */
proto.shipping.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.shipping.Response;
  return proto.shipping.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.shipping.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.shipping.Response}
 */
proto.shipping.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.shipping.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.shipping.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.shipping.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.shipping.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.shipping.Response} The clone.
 */
proto.shipping.Response.prototype.cloneMessage = function() {
  return /** @type {!proto.shipping.Response} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string requestId = 1;
 * @return {string}
 */
proto.shipping.Response.prototype.getRequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.shipping.Response.prototype.setRequestid = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.shipping);
